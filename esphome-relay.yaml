substitutions:
  name: esphome-web-64d3a8
  friendly_name: My Relay

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2024.6.0
  name_add_mac_suffix: false
  project:
    name: esphome.web
    version: dev

esp8266:
  board: esp01_1m
  restore_from_flash: True

# Enable logging
logger:
  level: DEBUG

# Enable Home Assistant API
api:

# Allow Over-The-Air updates
ota:
  - platform: esphome

# Allow provisioning Wi-Fi via serial
improv_serial:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# In combination with the `ap` this allows the user
# to provision wifi credentials to the device via WiFi AP.
captive_portal:

dashboard_import:
  package_import_url: github://esphome/example-configs/esphome-web/esp8266.yaml@main
  import_full_config: true

# To have a "next url" for improv serial
web_server:

switch:
  - platform: gpio
    name: "Relay"
    id: my_relay
    inverted: true
    pin: GPIO02
  - platform: template
    name: "Enable scheduler"
    id: scheduler_enabled
    optimistic: True
    restore_mode: RESTORE_DEFAULT_ON

datetime:
  - platform: template
    name: "Start time 1"
    id: start_time_1
    type:  TIME
    optimistic: True
    restore_value: True
    initial_value: '6:00'
  - platform: template
    name: "End time 1"
    id: end_time_1
    type:  TIME
    optimistic: True
    restore_value: True
    initial_value: '13:00'
  - platform: template
    name: "Start time 2"
    id: start_time_2
    type:  TIME
    optimistic: True
    restore_value: True
    initial_value: '18:00'
  - platform: template
    name: "End time 2"
    id: end_time_2
    type:  TIME
    optimistic: True
    restore_value: True
    initial_value: '22:00'

time:
  - platform: sntp
    id: sntp_time
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - lambda: |-
              if (! id(scheduler_enabled).state) {
                ESP_LOGD("main", "scheduler skipped for state: %d", id(scheduler_enabled).state );
                return;
              }
              int nowMinutes = id(sntp_time).now().hour * 60 + id(sntp_time).now().minute;
              int startTime1Minutes = id(start_time_1).hour * 60 + id(start_time_1).minute;
              int endTime1Minutes = id(end_time_1).hour * 60 + id(end_time_1).minute;
              int startTime2Minutes = id(start_time_2).hour * 60 + id(start_time_2).minute;
              int endTime2Minutes = id(end_time_2).hour * 60 + id(end_time_2).minute;
              if ( (nowMinutes >= startTime1Minutes && nowMinutes < endTime1Minutes) || (nowMinutes >= startTime2Minutes && nowMinutes < endTime2Minutes)) 
              {
                id(my_relay).turn_on();
              } 
              else 
              {
                id(my_relay).turn_off();
              };


